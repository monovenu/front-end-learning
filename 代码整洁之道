#care your code 在乎我写的代码
##起有意义的名字
明确 除了内部小循环，不用单字母变量名，特别是l,o
看代码就像在读文章
名副其实
避免误导
做有意义的区分
写可读的名称
名称长短与作用域大小相符
类名应该是名词或名词短语，首字母大写
方法名应该为动词或动词短语 get  set
每个概念用一个词。一义一词，一词一义
添加有意义的语境
##函数
短小：小于20行，减少嵌套层级，if内只有一行，是一个函数调用
只做一件事，是否能再拆出一个函数，重新诠释不算
一个函数可以被区分为很多区段，应该拆分
在一个抽象层上
自顶向下读代码
深合己意的命名
参数越少越好，超过两个封装为对象
参数名编码入函数名，减少记忆顺序负担
无副作用
避免使用输出参数
把返回对象信息和修改对象状态分开
消灭重复
##格式
即使代码不复存在，风格和可读性仍能保留
空白行区分概念
关系密切的代码应该相互靠近
变量声明应该靠近使用位置：1函数顶部 2循环之前 3长函数变量声明也可能出现在代码块的顶部
被调用的函数应该放在当前函数下面        			
代码行不要超过120个字符
在赋值操作符旁加空格，强化左右的分隔
参数间空格，强调参数彼此分离
*不加空格，+加空格，强调运算符的优先级
##对象
抽象，隐藏数据实现。对象隐藏数据，暴露操作
过程式代码：容易添加函数，但是添加新的数据结构需要修改所有函数
class circle(){
}
class rect(){
}
function calculateArea(){}
面向对象的代码：添加新的数据结构不需要修改代码，但加新函数功能需要修改所有类
class circle(){
  calculateArea(){}
}
class rect(){
  calculateArea(){}
}
